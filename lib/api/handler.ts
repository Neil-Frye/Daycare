import { NextResponse, type NextRequest } from 'next/server';
import { Session } from 'next-auth';
import logger from '@/lib/logger';
import { getUserSession, createUnauthorizedResponse, AuthenticationError } from '@/lib/auth/session';
import { NotFoundError, AuthorizationError } from '@/lib/supabase/utils'; // Assuming these are relevant across handlers

// Define the shape of the handler function that the wrapper will accept
// It receives the request and the authenticated session
type ApiHandler = (request: NextRequest, session: Session) => Promise<NextResponse>;

// Define options for the wrapper (optional, can be expanded later)
interface WithApiHandlerOptions {
  // Example: Add role checks or other specific middleware-like options later
}

/**
 * Wraps an API route handler with common logic like authentication,
 * error handling, and logging.
 *
 * @param {ApiHandler} handler - The actual API route logic function.
 * @param {WithApiHandlerOptions} [options] - Optional configuration for the wrapper.
 * @returns {Promise<NextResponse>} The response generated by the handler or an error response.
 */
export function withApiHandler(
  handler: ApiHandler,
  options?: WithApiHandlerOptions // Keep options for future extensibility
) {
  return async (request: NextRequest): Promise<NextResponse> => {
    let session: Session | null = null;
    try {
      // 1. Authenticate user
      session = await getUserSession();

      // 2. Execute the specific handler logic
      return await handler(request, session);

    } catch (error: any) {
      // 3. Centralized Error Handling & Logging
      const errorContext = {
        err: error,
        userId: session?.user?.id, // Log userId if available
        path: request.nextUrl.pathname,
        method: request.method,
      };

      logger.error(errorContext, `API handler error: ${error.message || 'Unknown error'}`);

      // Handle specific known errors first
      if (error instanceof AuthenticationError) {
        return createUnauthorizedResponse();
      }
      if (error instanceof AuthorizationError) {
        return NextResponse.json({ error: 'Access denied', details: error.message }, { status: 403 });
      }
      if (error instanceof NotFoundError) {
        return NextResponse.json({ error: 'Not found', details: error.message }, { status: 404 });
      }
      // Handle JSON parsing errors specifically if they might occur before handler logic
      if (error instanceof SyntaxError && error.message.includes('JSON')) {
         return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
      }
      // Handle potential Supabase errors (check if error has common Supabase properties)
      if (error.code && typeof error.code === 'string' && error.message) {
         return NextResponse.json({
            error: 'Database operation failed',
            details: error.message,
            code: error.code,
         }, { status: 500 });
      }

      // Generic fallback server error
      return NextResponse.json({ error: 'Internal Server Error', details: error.message || 'An unexpected error occurred' }, { status: 500 });
    }
  };
}
